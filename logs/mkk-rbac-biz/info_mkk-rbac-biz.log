[2020-12-17 11:27:58.381] [background-preinit] HV000001: Hibernate Validator 6.1.6.Final 
[2020-12-17 11:27:58.636] [main] Post-processing PropertySource instances 
[2020-12-17 11:27:58.684] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 11:27:58.684] [main] Converting PropertySource bootstrap [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:27:58.684] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:27:58.685] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:27:58.685] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 11:27:58.686] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:27:58.686] [main] Converting PropertySource applicationConfig: [classpath:/bootstrap.yml] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:27:58.716] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 11:27:58.719] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 11:27:58.720] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 11:27:59.112] [main] Bootstraping jasypt-string-boot auto configuration in context: mkk-rbac-biz-1 
[2020-12-17 11:27:59.112] [main] The following profiles are active: dev 
[2020-12-17 11:27:59.858] [main] AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether. 
[2020-12-17 11:27:59.985] [main] Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format. 
[2020-12-17 11:27:59.988] [main] Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format. 
[2020-12-17 11:28:00.220] [main] Multiple Spring Data modules found, entering strict repository configuration mode! 
[2020-12-17 11:28:00.222] [main] Bootstrapping Spring Data Redis repositories in DEFAULT mode. 
[2020-12-17 11:28:00.246] [main] Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces. 
[2020-12-17 11:28:00.293] [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format. 
[2020-12-17 11:28:00.435] [main] BeanFactory id=04747f92-8a36-3701-b06c-86f957a51cf8 
[2020-12-17 11:28:00.448] [main] Post-processing PropertySource instances 
[2020-12-17 11:28:00.458] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 11:28:00.458] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource bootstrapProperties-application-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 11:28:00.459] [main] Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource springCloudDefaultProperties [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 11:28:00.459] [main] Converting PropertySource cachedrandom [org.springframework.cloud.util.random.CachedRandomPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 11:28:00.469] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 11:28:00.673] [main] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@15214920' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 11:28:00.680] [main] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 11:28:00.690] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 11:28:00.690] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 11:28:00.746] [main] Bean 'spring.cloud.sentinel-com.alibaba.cloud.sentinel.SentinelProperties' of type [com.alibaba.cloud.sentinel.SentinelProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 11:28:00.841] [main] Bean 'com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration' of type [com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 11:28:01.031] [main] UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used 
[2020-12-17 11:28:01.058] [main] Initializing Spring embedded WebApplicationContext 
[2020-12-17 11:28:01.059] [main] Root WebApplicationContext: initialization completed in 1924 ms 
[2020-12-17 11:28:01.692] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysDeptRelation". 
[2020-12-17 11:28:01.901] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysUserRole". 
[2020-12-17 11:28:02.434] [main] String Encryptor custom Bean not found with name 'jasyptStringEncryptor'. Initializing Default String Encryptor 
[2020-12-17 11:28:02.441] [main] Encryptor config not found for property jasypt.encryptor.algorithm, using default value: PBEWithMD5AndDES 
[2020-12-17 11:28:02.441] [main] Encryptor config not found for property jasypt.encryptor.keyObtentionIterations, using default value: 1000 
[2020-12-17 11:28:02.441] [main] Encryptor config not found for property jasypt.encryptor.poolSize, using default value: 1 
[2020-12-17 11:28:02.441] [main] Encryptor config not found for property jasypt.encryptor.providerName, using default value: null 
[2020-12-17 11:28:02.441] [main] Encryptor config not found for property jasypt.encryptor.providerClassName, using default value: null 
[2020-12-17 11:28:02.441] [main] Encryptor config not found for property jasypt.encryptor.saltGeneratorClassname, using default value: org.jasypt.salt.RandomSaltGenerator 
[2020-12-17 11:28:02.442] [main] Encryptor config not found for property jasypt.encryptor.stringOutputType, using default value: base64 
[2020-12-17 11:28:02.862] [main] Initializing ExecutorService 
[2020-12-17 11:28:02.961] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysRoleMenu". 
[2020-12-17 11:28:03.330] [main] [Sentinel Starter] register SentinelWebInterceptor with urlPatterns: [/**]. 
[2020-12-17 11:28:03.637] [main] initializer namespace from System Property :null 
[2020-12-17 11:28:03.637] [main] initializer namespace from System Environment :null 
[2020-12-17 11:28:03.638] [main] initializer namespace from System Property :null 
[2020-12-17 11:28:03.655] [main] 初始化数据源配置OK...... 
[2020-12-17 11:28:03.892] [main] Exposing 21 endpoint(s) beneath base path '/actuator' 
[2020-12-17 11:28:04.157] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 11:28:04.157] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 11:28:04.160] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 11:28:04.160] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 11:28:04.238] [main] Initializing ExecutorService 'applicationTaskExecutor' 
[2020-12-17 11:28:04.342] [main] Initializing ExecutorService 'Nacos-Watch-Task-Scheduler' 
[2020-12-17 11:28:04.585] [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@ab94a32, org.springframework.security.web.context.SecurityContextPersistenceFilter@72015156, org.springframework.security.web.header.HeaderWriterFilter@5e976553, org.springframework.security.web.authentication.logout.LogoutFilter@510e6b93, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@7e532f2d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@bb38c49, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6055e899, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@70273633, org.springframework.security.web.session.SessionManagementFilter@4ac77269, org.springframework.security.web.access.ExceptionTranslationFilter@c8531b9, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7a600e21] 
[2020-12-17 11:28:04.874] [main] All Spring Cloud Security modules and starters are deprecated. They will be moved to individual projects in the next major release. 
[2020-12-17 11:28:04.999] [main] [LISTENER] adding DEFAULT_GROUP@@mkk-rbac-biz with DEFAULT to listener map 
[2020-12-17 11:28:05.010] [main] starting server: Undertow - 2.1.4.Final 
[2020-12-17 11:28:05.017] [main] XNIO version 3.8.0.Final 
[2020-12-17 11:28:05.024] [main] XNIO NIO Implementation Version 3.8.0.Final 
[2020-12-17 11:28:05.056] [main] JBoss Threads version 3.1.0.Final 
[2020-12-17 11:28:05.099] [main] Undertow started on port(s) 4000 (http) 
[2020-12-17 11:28:05.103] [main] [BEAT] adding beat: BeatInfo{port=4000, ip='192.168.139.1', weight=1.0, serviceName='DEFAULT_GROUP@@mkk-rbac-biz', cluster='DEFAULT', metadata={preserved.register.source=SPRING_CLOUD}, scheduled=false, period=5000, stopped=false} to beat map. 
[2020-12-17 11:28:05.104] [main] [REGISTER-SERVICE] public registering service DEFAULT_GROUP@@mkk-rbac-biz with instance: Instance{instanceId='null', ip='192.168.139.1', port=4000, weight=1.0, healthy=true, enabled=true, ephemeral=true, clusterName='DEFAULT', serviceName='null', metadata={preserved.register.source=SPRING_CLOUD}} 
[2020-12-17 11:28:05.107] [main] nacos registry, DEFAULT_GROUP mkk-rbac-biz 192.168.139.1:4000 register finished 
[2020-12-17 11:28:05.588] [main] Started AdminApplication in 7.855 seconds (JVM running for 8.632) 
[2020-12-17 11:28:05.591] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz.yml+DEFAULT_GROUP 
[2020-12-17 11:28:05.592] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 11:28:05.593] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz-dev.yml+DEFAULT_GROUP 
[2020-12-17 11:28:05.593] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz-dev.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 11:28:05.593] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz+DEFAULT_GROUP 
[2020-12-17 11:28:05.593] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 11:28:05.780] [RMI TCP Connection(5)-192.168.139.1] Initializing Spring DispatcherServlet 'dispatcherServlet' 
[2020-12-17 11:28:05.780] [RMI TCP Connection(5)-192.168.139.1] Initializing Servlet 'dispatcherServlet' 
[2020-12-17 11:28:05.788] [RMI TCP Connection(5)-192.168.139.1] Completed initialization in 8 ms 
[2020-12-17 11:28:06.007] [com.alibaba.nacos.client.naming.updater] new ips(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 11:28:06.009] [com.alibaba.nacos.client.naming.updater] current ips:(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 11:28:07.062] [RMI TCP Connection(7)-192.168.139.1] {dataSource-1} inited 
[2020-12-17 11:28:07.155] [RMI TCP Connection(7)-192.168.139.1] {dataSource-2} inited 
[2020-12-17 11:28:40.140] [XNIO-1 task-1] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 11:28:40.154] [XNIO-1 task-1] Client: mkk-base-auth instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-base-auth,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null 
[2020-12-17 11:28:40.160] [XNIO-1 task-1] Using serverListUpdater PollingServerListUpdater 
[2020-12-17 11:28:40.164] [XNIO-1 task-1] new ips(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 11:28:40.165] [XNIO-1 task-1] current ips:(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 11:28:40.173] [XNIO-1 task-1] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 11:28:40.174] [XNIO-1 task-1] DynamicServerListLoadBalancer for client mkk-base-auth initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-base-auth,current list of Servers=[192.168.139.1:3000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.139.1:3000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@4ce044a7 
[2020-12-17 11:28:40.267] [XNIO-1 task-1] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 11:28:40.359] [XNIO-1 task-1] SELECT user_id,username,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：33毫秒] 
[2020-12-17 11:28:40.365] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：2毫秒] 
[2020-12-17 11:28:40.452] [XNIO-1 task-1] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：186 毫秒 
[2020-12-17 11:28:40.537] [XNIO-1 task-1] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 11:28:40.556] [XNIO-1 task-1] <ed>调用方法： menu，ip=10.101.128.64，执行时间：19 毫秒 
[2020-12-17 11:28:41.163] [PollingServerListUpdater-0] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 11:28:42.340] [XNIO-1 task-1] <st>调用方法： dict/type/log_type，ip=10.101.128.64 
[2020-12-17 11:28:42.371] [XNIO-1 task-2] <st>调用方法： log/page，ip=10.101.128.64 
[2020-12-17 11:28:42.375] [XNIO-1 task-1] 全局异常信息 ex=Cannot deserialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is org.springframework.core.NestedIOException: Failed to deserialize object type; nested exception is java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R 
org.springframework.data.redis.serializer.SerializationException: Cannot deserialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is org.springframework.core.NestedIOException: Failed to deserialize object type; nested exception is java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R
	at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.deserialize(JdkSerializationRedisSerializer.java:84)
	at org.springframework.data.redis.serializer.DefaultRedisElementReader.read(DefaultRedisElementReader.java:48)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.read(RedisSerializationContext.java:272)
	at org.springframework.data.redis.cache.RedisCache.deserializeCacheValue(RedisCache.java:260)
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:94)
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:571)
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:536)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:402)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:346)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.cloud.mkk.admin.controller.DictController$$EnhancerBySpringCGLIB$$203bec30.getDictByType(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:645)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:750)
	at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
	at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)
	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
	at io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68)
	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132)
	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
	at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:269)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:78)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:133)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:130)
	at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:249)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:78)
	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:99)
	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:370)
	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:836)
	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2019)
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1558)
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1449)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is org.springframework.core.NestedIOException: Failed to deserialize object type; nested exception is java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R
	at org.springframework.core.serializer.support.DeserializingConverter.convert(DeserializingConverter.java:78)
	at org.springframework.core.serializer.support.DeserializingConverter.convert(DeserializingConverter.java:36)
	at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.deserialize(JdkSerializationRedisSerializer.java:82)
	... 120 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to deserialize object type; nested exception is java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R
	at org.springframework.core.serializer.DefaultDeserializer.deserialize(DefaultDeserializer.java:75)
	at org.springframework.core.serializer.support.DeserializingConverter.convert(DeserializingConverter.java:73)
	... 122 common frames omitted
Caused by: java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:284)
	at org.springframework.core.ConfigurableObjectInputStream.resolveClass(ConfigurableObjectInputStream.java:76)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1868)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2042)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at org.springframework.core.serializer.DefaultDeserializer.deserialize(DefaultDeserializer.java:72)
	... 123 common frames omitted
[2020-12-17 11:28:42.378] [XNIO-1 task-1] <ed>调用方法： dict/type/log_type，ip=10.101.128.64，执行时间：38 毫秒 
[2020-12-17 11:28:42.408] [XNIO-1 task-2] SELECT id,type,title,create_by,create_time,update_time,remote_addr,user_agent,request_uri,method,params,time,exception,service_id,del_flag FROM sys_log WHERE del_flag='0'[SQL执行时间：32毫秒] 
[2020-12-17 11:28:42.417] [XNIO-1 task-2] <ed>调用方法： log/page，ip=10.101.128.64，执行时间：46 毫秒 
[2020-12-17 11:55:12.004] [XNIO-1 task-2] <st>调用方法： log/page，ip=10.101.128.64 
[2020-12-17 11:55:12.015] [XNIO-1 task-2] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 1589601 
[2020-12-17 11:55:12.024] [XNIO-1 task-2] SELECT id,type,title,create_by,create_time,update_time,remote_addr,user_agent,request_uri,method,params,time,exception,service_id,del_flag FROM sys_log WHERE del_flag='0'[SQL执行时间：19毫秒] 
[2020-12-17 11:55:12.026] [XNIO-1 task-2] <ed>调用方法： log/page，ip=10.101.128.64，执行时间：22 毫秒 
[2020-12-17 13:10:37.906] [XNIO-1 task-2] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 13:10:37.917] [XNIO-1 task-2] SELECT user_id,username,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：8毫秒] 
[2020-12-17 13:10:37.918] [XNIO-1 task-2] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 13:10:37.932] [XNIO-1 task-2] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：26 毫秒 
[2020-12-17 13:10:38.196] [XNIO-1 task-2] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 13:10:38.197] [XNIO-1 task-1] <st>调用方法： dict/type/log_type，ip=10.101.128.64 
[2020-12-17 13:10:38.202] [XNIO-1 task-3] <st>调用方法： log/page，ip=10.101.128.64 
[2020-12-17 13:10:38.202] [XNIO-1 task-1] 全局异常信息 ex=Cannot deserialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is org.springframework.core.NestedIOException: Failed to deserialize object type; nested exception is java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R 
org.springframework.data.redis.serializer.SerializationException: Cannot deserialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is org.springframework.core.NestedIOException: Failed to deserialize object type; nested exception is java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R
	at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.deserialize(JdkSerializationRedisSerializer.java:84)
	at org.springframework.data.redis.serializer.DefaultRedisElementReader.read(DefaultRedisElementReader.java:48)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.read(RedisSerializationContext.java:272)
	at org.springframework.data.redis.cache.RedisCache.deserializeCacheValue(RedisCache.java:260)
	at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:94)
	at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)
	at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:571)
	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:536)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:402)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:346)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.cloud.mkk.admin.controller.DictController$$EnhancerBySpringCGLIB$$203bec30.getDictByType(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:645)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:750)
	at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
	at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)
	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
	at io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68)
	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132)
	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
	at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:269)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:78)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:133)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:130)
	at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:249)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:78)
	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:99)
	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:370)
	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:836)
	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2019)
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1558)
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1449)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is org.springframework.core.NestedIOException: Failed to deserialize object type; nested exception is java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R
	at org.springframework.core.serializer.support.DeserializingConverter.convert(DeserializingConverter.java:78)
	at org.springframework.core.serializer.support.DeserializingConverter.convert(DeserializingConverter.java:36)
	at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.deserialize(JdkSerializationRedisSerializer.java:82)
	... 120 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to deserialize object type; nested exception is java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R
	at org.springframework.core.serializer.DefaultDeserializer.deserialize(DefaultDeserializer.java:75)
	at org.springframework.core.serializer.support.DeserializingConverter.convert(DeserializingConverter.java:73)
	... 122 common frames omitted
Caused by: java.lang.ClassNotFoundException: com.cloud.mkk.common.core.util.R
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:284)
	at org.springframework.core.ConfigurableObjectInputStream.resolveClass(ConfigurableObjectInputStream.java:76)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1868)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2042)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at org.springframework.core.serializer.DefaultDeserializer.deserialize(DefaultDeserializer.java:72)
	... 123 common frames omitted
[2020-12-17 13:10:38.204] [XNIO-1 task-1] <ed>调用方法： dict/type/log_type，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 13:10:38.210] [XNIO-1 task-2] <ed>调用方法： menu，ip=10.101.128.64，执行时间：14 毫秒 
[2020-12-17 13:10:38.214] [XNIO-1 task-3] SELECT id,type,title,create_by,create_time,update_time,remote_addr,user_agent,request_uri,method,params,time,exception,service_id,del_flag FROM sys_log WHERE del_flag='0'[SQL执行时间：11毫秒] 
[2020-12-17 13:10:38.215] [XNIO-1 task-3] <ed>调用方法： log/page，ip=10.101.128.64，执行时间：13 毫秒 
[2020-12-17 13:11:36.239] [XNIO-1 task-3] <st>调用方法： log/page，ip=10.101.128.64 
[2020-12-17 13:11:36.244] [XNIO-1 task-3] SELECT id,type,title,create_by,create_time,update_time,remote_addr,user_agent,request_uri,method,params,time,exception,service_id,del_flag FROM sys_log WHERE del_flag='0'[SQL执行时间：4毫秒] 
[2020-12-17 13:11:36.245] [XNIO-1 task-3] <ed>调用方法： log/page，ip=10.101.128.64，执行时间：6 毫秒 
[2020-12-17 13:16:32.518] [XNIO-1 task-3] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 13:16:32.528] [XNIO-1 task-3] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 296285 
[2020-12-17 13:16:32.535] [XNIO-1 task-3] SELECT user_id,username,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：9毫秒] 
[2020-12-17 13:16:32.536] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 13:16:32.539] [XNIO-1 task-3] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：21 毫秒 
[2020-12-17 13:16:32.719] [XNIO-1 task-3] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 13:16:32.722] [XNIO-1 task-3] SELECT user_id,username,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 13:16:32.724] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：2毫秒] 
[2020-12-17 13:16:32.729] [XNIO-1 task-3] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：10 毫秒 
[2020-12-17 13:16:32.789] [XNIO-1 task-3] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 13:16:32.804] [XNIO-1 task-3] <ed>调用方法： menu，ip=10.101.128.64，执行时间：15 毫秒 
[2020-12-17 13:16:56.259] [XNIO-1 task-3] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 13:16:56.262] [XNIO-1 task-3] SELECT user_id,username,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 13:16:56.263] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 13:16:56.265] [XNIO-1 task-3] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：6 毫秒 
[2020-12-17 13:16:56.370] [XNIO-1 task-3] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 13:16:56.372] [XNIO-1 task-3] SELECT user_id,username,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：1毫秒] 
[2020-12-17 13:16:56.374] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 13:16:56.377] [XNIO-1 task-3] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 13:16:56.433] [XNIO-1 task-3] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 13:16:56.437] [XNIO-1 task-3] <ed>调用方法： menu，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 13:17:44.753] [XNIO-1 task-3] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 13:17:44.756] [XNIO-1 task-3] SELECT user_id,username,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 13:17:44.757] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 13:17:44.761] [XNIO-1 task-3] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：8 毫秒 
[2020-12-17 13:17:44.899] [XNIO-1 task-3] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 13:17:44.902] [XNIO-1 task-3] SELECT user_id,username,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 13:17:44.903] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 13:17:44.906] [XNIO-1 task-3] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 13:17:44.948] [XNIO-1 task-3] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 13:17:44.951] [XNIO-1 task-3] <ed>调用方法： menu，ip=10.101.128.64，执行时间：3 毫秒 
[2020-12-17 13:19:20.219] [XNIO-1 task-3] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 13:19:20.227] [XNIO-1 task-3] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 95324 
[2020-12-17 13:19:20.235] [XNIO-1 task-3] SELECT user.user_id, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：12毫秒] 
[2020-12-17 13:19:20.238] [XNIO-1 task-3] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：19 毫秒 
[2020-12-17 13:56:23.230] [background-preinit] HV000001: Hibernate Validator 6.1.6.Final 
[2020-12-17 13:56:23.510] [main] Post-processing PropertySource instances 
[2020-12-17 13:56:23.562] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 13:56:23.563] [main] Converting PropertySource bootstrap [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:23.563] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:23.563] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:23.564] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 13:56:23.564] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:23.564] [main] Converting PropertySource applicationConfig: [classpath:/bootstrap.yml] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:23.596] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 13:56:23.601] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 13:56:23.602] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 13:56:24.009] [main] Bootstraping jasypt-string-boot auto configuration in context: mkk-rbac-biz-1 
[2020-12-17 13:56:24.010] [main] The following profiles are active: dev 
[2020-12-17 13:56:24.804] [main] AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether. 
[2020-12-17 13:56:24.928] [main] Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format. 
[2020-12-17 13:56:24.931] [main] Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format. 
[2020-12-17 13:56:25.155] [main] Multiple Spring Data modules found, entering strict repository configuration mode! 
[2020-12-17 13:56:25.157] [main] Bootstrapping Spring Data Redis repositories in DEFAULT mode. 
[2020-12-17 13:56:25.181] [main] Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces. 
[2020-12-17 13:56:25.228] [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format. 
[2020-12-17 13:56:25.395] [main] BeanFactory id=04747f92-8a36-3701-b06c-86f957a51cf8 
[2020-12-17 13:56:25.408] [main] Post-processing PropertySource instances 
[2020-12-17 13:56:25.418] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 13:56:25.418] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 13:56:25.418] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 13:56:25.418] [main] Converting PropertySource bootstrapProperties-application-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 13:56:25.418] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 13:56:25.419] [main] Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 13:56:25.419] [main] Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 13:56:25.419] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:25.419] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:25.419] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 13:56:25.419] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:25.419] [main] Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:25.419] [main] Converting PropertySource springCloudDefaultProperties [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 13:56:25.419] [main] Converting PropertySource cachedrandom [org.springframework.cloud.util.random.CachedRandomPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 13:56:25.429] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 13:56:25.636] [main] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@15214920' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 13:56:25.641] [main] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 13:56:25.650] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 13:56:25.650] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 13:56:25.706] [main] Bean 'spring.cloud.sentinel-com.alibaba.cloud.sentinel.SentinelProperties' of type [com.alibaba.cloud.sentinel.SentinelProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 13:56:25.803] [main] Bean 'com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration' of type [com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 13:56:25.991] [main] UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used 
[2020-12-17 13:56:26.016] [main] Initializing Spring embedded WebApplicationContext 
[2020-12-17 13:56:26.016] [main] Root WebApplicationContext: initialization completed in 1979 ms 
[2020-12-17 13:56:26.556] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysDeptRelation". 
[2020-12-17 13:56:26.756] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysUserRole". 
[2020-12-17 13:56:27.300] [main] String Encryptor custom Bean not found with name 'jasyptStringEncryptor'. Initializing Default String Encryptor 
[2020-12-17 13:56:27.308] [main] Encryptor config not found for property jasypt.encryptor.algorithm, using default value: PBEWithMD5AndDES 
[2020-12-17 13:56:27.308] [main] Encryptor config not found for property jasypt.encryptor.keyObtentionIterations, using default value: 1000 
[2020-12-17 13:56:27.308] [main] Encryptor config not found for property jasypt.encryptor.poolSize, using default value: 1 
[2020-12-17 13:56:27.308] [main] Encryptor config not found for property jasypt.encryptor.providerName, using default value: null 
[2020-12-17 13:56:27.308] [main] Encryptor config not found for property jasypt.encryptor.providerClassName, using default value: null 
[2020-12-17 13:56:27.308] [main] Encryptor config not found for property jasypt.encryptor.saltGeneratorClassname, using default value: org.jasypt.salt.RandomSaltGenerator 
[2020-12-17 13:56:27.309] [main] Encryptor config not found for property jasypt.encryptor.stringOutputType, using default value: base64 
[2020-12-17 13:56:27.728] [main] Initializing ExecutorService 
[2020-12-17 13:56:27.816] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysRoleMenu". 
[2020-12-17 13:56:28.194] [main] [Sentinel Starter] register SentinelWebInterceptor with urlPatterns: [/**]. 
[2020-12-17 13:56:28.500] [main] initializer namespace from System Property :null 
[2020-12-17 13:56:28.500] [main] initializer namespace from System Environment :null 
[2020-12-17 13:56:28.501] [main] initializer namespace from System Property :null 
[2020-12-17 13:56:28.519] [main] 初始化数据源配置OK...... 
[2020-12-17 13:56:28.650] [main] Exposing 21 endpoint(s) beneath base path '/actuator' 
[2020-12-17 13:56:29.064] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 13:56:29.065] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 13:56:29.068] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 13:56:29.068] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 13:56:29.148] [main] Initializing ExecutorService 'applicationTaskExecutor' 
[2020-12-17 13:56:29.255] [main] Initializing ExecutorService 'Nacos-Watch-Task-Scheduler' 
[2020-12-17 13:56:29.501] [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ad6895a, org.springframework.security.web.context.SecurityContextPersistenceFilter@85f5f55, org.springframework.security.web.header.HeaderWriterFilter@49222187, org.springframework.security.web.authentication.logout.LogoutFilter@49b180c8, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@2696b687, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@394331a8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3321fb65, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@10e4cc6, org.springframework.security.web.session.SessionManagementFilter@15c3849f, org.springframework.security.web.access.ExceptionTranslationFilter@58041b11, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@37393dab] 
[2020-12-17 13:56:29.786] [main] All Spring Cloud Security modules and starters are deprecated. They will be moved to individual projects in the next major release. 
[2020-12-17 13:56:29.913] [main] [LISTENER] adding DEFAULT_GROUP@@mkk-rbac-biz with DEFAULT to listener map 
[2020-12-17 13:56:29.924] [main] starting server: Undertow - 2.1.4.Final 
[2020-12-17 13:56:29.930] [main] XNIO version 3.8.0.Final 
[2020-12-17 13:56:29.937] [main] XNIO NIO Implementation Version 3.8.0.Final 
[2020-12-17 13:56:29.970] [main] JBoss Threads version 3.1.0.Final 
[2020-12-17 13:56:30.009] [main] Undertow started on port(s) 4000 (http) 
[2020-12-17 13:56:30.012] [main] [BEAT] adding beat: BeatInfo{port=4000, ip='192.168.139.1', weight=1.0, serviceName='DEFAULT_GROUP@@mkk-rbac-biz', cluster='DEFAULT', metadata={preserved.register.source=SPRING_CLOUD}, scheduled=false, period=5000, stopped=false} to beat map. 
[2020-12-17 13:56:30.013] [main] [REGISTER-SERVICE] public registering service DEFAULT_GROUP@@mkk-rbac-biz with instance: Instance{instanceId='null', ip='192.168.139.1', port=4000, weight=1.0, healthy=true, enabled=true, ephemeral=true, clusterName='DEFAULT', serviceName='null', metadata={preserved.register.source=SPRING_CLOUD}} 
[2020-12-17 13:56:30.017] [main] nacos registry, DEFAULT_GROUP mkk-rbac-biz 192.168.139.1:4000 register finished 
[2020-12-17 13:56:30.490] [main] Started AdminApplication in 7.992 seconds (JVM running for 8.75) 
[2020-12-17 13:56:30.494] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz.yml+DEFAULT_GROUP 
[2020-12-17 13:56:30.495] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 13:56:30.496] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz-dev.yml+DEFAULT_GROUP 
[2020-12-17 13:56:30.496] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz-dev.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 13:56:30.496] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz+DEFAULT_GROUP 
[2020-12-17 13:56:30.496] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 13:56:30.916] [RMI TCP Connection(4)-192.168.139.1] Initializing Spring DispatcherServlet 'dispatcherServlet' 
[2020-12-17 13:56:30.916] [RMI TCP Connection(4)-192.168.139.1] Initializing Servlet 'dispatcherServlet' 
[2020-12-17 13:56:30.925] [RMI TCP Connection(4)-192.168.139.1] Completed initialization in 9 ms 
[2020-12-17 13:56:30.925] [com.alibaba.nacos.client.naming.updater] new ips(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 13:56:30.928] [com.alibaba.nacos.client.naming.updater] current ips:(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 13:56:31.955] [RMI TCP Connection(5)-192.168.139.1] {dataSource-1} inited 
[2020-12-17 13:56:32.052] [RMI TCP Connection(5)-192.168.139.1] {dataSource-2} inited 
[2020-12-17 14:02:42.226] [background-preinit] HV000001: Hibernate Validator 6.1.6.Final 
[2020-12-17 14:02:42.492] [main] Post-processing PropertySource instances 
[2020-12-17 14:02:42.542] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 14:02:42.543] [main] Converting PropertySource bootstrap [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:42.543] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:42.543] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:42.544] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:02:42.544] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:42.544] [main] Converting PropertySource applicationConfig: [classpath:/bootstrap.yml] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:42.576] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 14:02:42.580] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 14:02:42.581] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 14:02:42.980] [main] Bootstraping jasypt-string-boot auto configuration in context: mkk-rbac-biz-1 
[2020-12-17 14:02:42.980] [main] The following profiles are active: dev 
[2020-12-17 14:02:43.747] [main] AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether. 
[2020-12-17 14:02:43.879] [main] Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format. 
[2020-12-17 14:02:43.882] [main] Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format. 
[2020-12-17 14:02:44.127] [main] Multiple Spring Data modules found, entering strict repository configuration mode! 
[2020-12-17 14:02:44.129] [main] Bootstrapping Spring Data Redis repositories in DEFAULT mode. 
[2020-12-17 14:02:44.155] [main] Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces. 
[2020-12-17 14:02:44.209] [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format. 
[2020-12-17 14:02:44.347] [main] BeanFactory id=04747f92-8a36-3701-b06c-86f957a51cf8 
[2020-12-17 14:02:44.361] [main] Post-processing PropertySource instances 
[2020-12-17 14:02:44.371] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource bootstrapProperties-application-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 14:02:44.371] [main] Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource springCloudDefaultProperties [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:02:44.371] [main] Converting PropertySource cachedrandom [org.springframework.cloud.util.random.CachedRandomPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:02:44.382] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 14:02:44.588] [main] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@13cc0b90' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 14:02:44.595] [main] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 14:02:44.605] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 14:02:44.605] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 14:02:44.664] [main] Bean 'spring.cloud.sentinel-com.alibaba.cloud.sentinel.SentinelProperties' of type [com.alibaba.cloud.sentinel.SentinelProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 14:02:44.765] [main] Bean 'com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration' of type [com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 14:02:44.952] [main] UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used 
[2020-12-17 14:02:44.976] [main] Initializing Spring embedded WebApplicationContext 
[2020-12-17 14:02:44.976] [main] Root WebApplicationContext: initialization completed in 1973 ms 
[2020-12-17 14:02:45.545] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysDeptRelation". 
[2020-12-17 14:02:45.719] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysUserRole". 
[2020-12-17 14:02:46.263] [main] String Encryptor custom Bean not found with name 'jasyptStringEncryptor'. Initializing Default String Encryptor 
[2020-12-17 14:02:46.270] [main] Encryptor config not found for property jasypt.encryptor.algorithm, using default value: PBEWithMD5AndDES 
[2020-12-17 14:02:46.270] [main] Encryptor config not found for property jasypt.encryptor.keyObtentionIterations, using default value: 1000 
[2020-12-17 14:02:46.271] [main] Encryptor config not found for property jasypt.encryptor.poolSize, using default value: 1 
[2020-12-17 14:02:46.271] [main] Encryptor config not found for property jasypt.encryptor.providerName, using default value: null 
[2020-12-17 14:02:46.271] [main] Encryptor config not found for property jasypt.encryptor.providerClassName, using default value: null 
[2020-12-17 14:02:46.271] [main] Encryptor config not found for property jasypt.encryptor.saltGeneratorClassname, using default value: org.jasypt.salt.RandomSaltGenerator 
[2020-12-17 14:02:46.272] [main] Encryptor config not found for property jasypt.encryptor.stringOutputType, using default value: base64 
[2020-12-17 14:02:46.699] [main] Initializing ExecutorService 
[2020-12-17 14:02:46.788] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysRoleMenu". 
[2020-12-17 14:02:47.167] [main] [Sentinel Starter] register SentinelWebInterceptor with urlPatterns: [/**]. 
[2020-12-17 14:02:47.486] [main] initializer namespace from System Property :null 
[2020-12-17 14:02:47.486] [main] initializer namespace from System Environment :null 
[2020-12-17 14:02:47.486] [main] initializer namespace from System Property :null 
[2020-12-17 14:02:47.505] [main] 初始化数据源配置OK...... 
[2020-12-17 14:02:47.747] [main] Exposing 21 endpoint(s) beneath base path '/actuator' 
[2020-12-17 14:02:48.016] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 14:02:48.016] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 14:02:48.020] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 14:02:48.020] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 14:02:48.101] [main] Initializing ExecutorService 'applicationTaskExecutor' 
[2020-12-17 14:02:48.208] [main] Initializing ExecutorService 'Nacos-Watch-Task-Scheduler' 
[2020-12-17 14:02:48.458] [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@50628080, org.springframework.security.web.context.SecurityContextPersistenceFilter@478cebdb, org.springframework.security.web.header.HeaderWriterFilter@4ac77269, org.springframework.security.web.authentication.logout.LogoutFilter@5b634e24, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@2b06f498, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1b3a95d9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@58041b11, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@155318b5, org.springframework.security.web.session.SessionManagementFilter@724c26e0, org.springframework.security.web.access.ExceptionTranslationFilter@758d0555, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@69dc7b24] 
[2020-12-17 14:02:48.751] [main] All Spring Cloud Security modules and starters are deprecated. They will be moved to individual projects in the next major release. 
[2020-12-17 14:02:48.880] [main] [LISTENER] adding DEFAULT_GROUP@@mkk-rbac-biz with DEFAULT to listener map 
[2020-12-17 14:02:48.891] [main] starting server: Undertow - 2.1.4.Final 
[2020-12-17 14:02:48.897] [main] XNIO version 3.8.0.Final 
[2020-12-17 14:02:48.904] [main] XNIO NIO Implementation Version 3.8.0.Final 
[2020-12-17 14:02:48.939] [main] JBoss Threads version 3.1.0.Final 
[2020-12-17 14:02:48.978] [main] Undertow started on port(s) 4000 (http) 
[2020-12-17 14:02:48.982] [main] [BEAT] adding beat: BeatInfo{port=4000, ip='192.168.139.1', weight=1.0, serviceName='DEFAULT_GROUP@@mkk-rbac-biz', cluster='DEFAULT', metadata={preserved.register.source=SPRING_CLOUD}, scheduled=false, period=5000, stopped=false} to beat map. 
[2020-12-17 14:02:48.983] [main] [REGISTER-SERVICE] public registering service DEFAULT_GROUP@@mkk-rbac-biz with instance: Instance{instanceId='null', ip='192.168.139.1', port=4000, weight=1.0, healthy=true, enabled=true, ephemeral=true, clusterName='DEFAULT', serviceName='null', metadata={preserved.register.source=SPRING_CLOUD}} 
[2020-12-17 14:02:48.987] [main] nacos registry, DEFAULT_GROUP mkk-rbac-biz 192.168.139.1:4000 register finished 
[2020-12-17 14:02:49.479] [main] Started AdminApplication in 7.931 seconds (JVM running for 8.653) 
[2020-12-17 14:02:49.483] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz.yml+DEFAULT_GROUP 
[2020-12-17 14:02:49.484] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 14:02:49.484] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz-dev.yml+DEFAULT_GROUP 
[2020-12-17 14:02:49.484] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz-dev.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 14:02:49.484] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz+DEFAULT_GROUP 
[2020-12-17 14:02:49.484] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 14:02:49.892] [com.alibaba.nacos.client.naming.updater] new ips(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:02:49.895] [com.alibaba.nacos.client.naming.updater] current ips:(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:02:50.034] [RMI TCP Connection(3)-192.168.139.1] Initializing Spring DispatcherServlet 'dispatcherServlet' 
[2020-12-17 14:02:50.034] [RMI TCP Connection(3)-192.168.139.1] Initializing Servlet 'dispatcherServlet' 
[2020-12-17 14:02:50.042] [RMI TCP Connection(3)-192.168.139.1] Completed initialization in 8 ms 
[2020-12-17 14:02:51.079] [RMI TCP Connection(2)-192.168.139.1] {dataSource-1} inited 
[2020-12-17 14:02:51.179] [RMI TCP Connection(2)-192.168.139.1] {dataSource-2} inited 
[2020-12-17 14:23:03.940] [XNIO-1 task-1] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 14:23:04.032] [XNIO-1 task-1] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 1212854 
[2020-12-17 14:23:04.064] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：48毫秒] 
[2020-12-17 14:23:04.070] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：2毫秒] 
[2020-12-17 14:23:04.165] [XNIO-1 task-1] SELECT sys_menu.* FROM sys_menu LEFT JOIN sys_role_menu ON sys_menu.menu_id = sys_role_menu.menu_id WHERE sys_menu.del_flag = 0 AND sys_role_menu.role_id = 1 ORDER BY sys_menu.sort DESC[SQL执行时间：8毫秒] 
[2020-12-17 14:23:04.211] [XNIO-1 task-1] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：271 毫秒 
[2020-12-17 14:23:04.644] [XNIO-1 task-1] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:23:04.658] [XNIO-1 task-1] Client: mkk-base-auth instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-base-auth,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null 
[2020-12-17 14:23:04.664] [XNIO-1 task-1] Using serverListUpdater PollingServerListUpdater 
[2020-12-17 14:23:04.668] [XNIO-1 task-1] new ips(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:23:04.669] [XNIO-1 task-1] current ips:(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:23:04.678] [XNIO-1 task-1] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:23:04.679] [XNIO-1 task-1] DynamicServerListLoadBalancer for client mkk-base-auth initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-base-auth,current list of Servers=[192.168.139.1:3000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.139.1:3000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@19b3c20f 
[2020-12-17 14:23:04.743] [XNIO-1 task-1] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 14:23:04.746] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：1毫秒] 
[2020-12-17 14:23:04.747] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：0毫秒] 
[2020-12-17 14:23:04.753] [XNIO-1 task-1] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：10 毫秒 
[2020-12-17 14:23:04.817] [XNIO-1 task-1] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 14:23:04.831] [XNIO-1 task-1] <ed>调用方法： menu，ip=10.101.128.64，执行时间：14 毫秒 
[2020-12-17 14:23:05.668] [PollingServerListUpdater-0] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:23:22.326] [XNIO-1 task-1] <st>调用方法： dict/type/dict_type，ip=10.101.128.64 
[2020-12-17 14:23:22.341] [XNIO-1 task-1] SELECT id,dict_id,value,label,type,description,sort,create_time,update_time,remarks,del_flag FROM sys_dict_item WHERE del_flag='0' AND (type = 'dict_type')[SQL执行时间：3毫秒] 
[2020-12-17 14:23:22.343] [XNIO-1 task-2] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 14:23:22.346] [XNIO-1 task-1] <ed>调用方法： dict/type/dict_type，ip=10.101.128.64，执行时间：20 毫秒 
[2020-12-17 14:23:22.381] [XNIO-1 task-2] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:23:22.382] [XNIO-1 task-2] Client: mkk-config-biz instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-config-biz,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null 
[2020-12-17 14:23:22.383] [XNIO-1 task-2] Using serverListUpdater PollingServerListUpdater 
[2020-12-17 14:23:22.385] [XNIO-1 task-2] new ips(1) service: DEFAULT_GROUP@@mkk-config-biz -> [{"instanceId":"192.168.139.1#6000#DEFAULT#DEFAULT_GROUP@@mkk-config-biz","ip":"192.168.139.1","port":6000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-config-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:23:22.385] [XNIO-1 task-2] current ips:(1) service: DEFAULT_GROUP@@mkk-config-biz -> [{"instanceId":"192.168.139.1#6000#DEFAULT#DEFAULT_GROUP@@mkk-config-biz","ip":"192.168.139.1","port":6000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-config-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:23:22.386] [XNIO-1 task-2] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:23:22.387] [XNIO-1 task-2] DynamicServerListLoadBalancer for client mkk-config-biz initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-config-biz,current list of Servers=[192.168.139.1:6000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.139.1:6000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@246274d5 
[2020-12-17 14:23:22.586] [XNIO-1 task-2] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE del_flag='0'[SQL执行时间：31毫秒] 
[2020-12-17 14:23:22.589] [XNIO-1 task-2] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：246 毫秒 
[2020-12-17 14:23:23.385] [PollingServerListUpdater-0] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:24:26.902] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:24:26.910] [XNIO-1 task-2] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 64324 
[2020-12-17 14:24:26.920] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：14毫秒] 
[2020-12-17 14:24:26.922] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：20 毫秒 
[2020-12-17 14:24:28.710] [XNIO-1 task-2] <st>调用方法： dept/tree，ip=10.101.128.64 
[2020-12-17 14:24:28.714] [XNIO-1 task-1] <st>调用方法： role/list，ip=10.101.128.64 
[2020-12-17 14:24:28.715] [XNIO-1 task-2] SELECT dept_id,name,sort,create_time,update_time,parent_id,del_flag FROM sys_dept WHERE del_flag='0'[SQL执行时间：3毫秒] 
[2020-12-17 14:24:28.717] [XNIO-1 task-2] <ed>调用方法： dept/tree，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 14:24:28.719] [XNIO-1 task-1] SELECT role_id,role_name,role_code,role_desc,create_time,update_time,del_flag FROM sys_role WHERE del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 14:24:28.720] [XNIO-1 task-1] <ed>调用方法： role/list，ip=10.101.128.64，执行时间：6 毫秒 
[2020-12-17 14:24:31.184] [XNIO-1 task-1] <st>调用方法： user/details/admin，ip=10.101.128.64 
[2020-12-17 14:24:31.188] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE username='admin' AND del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 14:24:31.188] [XNIO-1 task-1] <ed>调用方法： user/details/admin，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 14:24:31.232] [XNIO-1 task-1] <st>调用方法： user，ip=10.101.128.64 
[2020-12-17 14:24:31.259] [XNIO-1 task-1] UPDATE sys_user SET username='admin', fullname='系统管理员', create_time=2018-04-20T07:15:18, update_time=2020-12-17T14:24:31.254, lock_flag='0', phone='17034642999', avatar='', dept_id=1 WHERE user_id=1 AND del_flag='0'[SQL执行时间：4毫秒] 
[2020-12-17 14:24:31.266] [XNIO-1 task-1] DELETE FROM sys_user_role WHERE (user_id = 1)[SQL执行时间：2毫秒] 
[2020-12-17 14:24:31.269] [XNIO-1 task-1] INSERT INTO sys_user_role ( user_id, role_id ) VALUES ( 1, 1 )[SQL执行时间：2毫秒] 
[2020-12-17 14:24:31.276] [XNIO-1 task-1] <ed>调用方法： user，ip=10.101.128.64，执行时间：44 毫秒 
[2020-12-17 14:24:31.311] [task-1] Flipping property: mkk-rbac-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:24:31.312] [task-1] Client: mkk-rbac-biz instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-rbac-biz,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null 
[2020-12-17 14:24:31.313] [task-1] Using serverListUpdater PollingServerListUpdater 
[2020-12-17 14:24:31.314] [task-1] new ips(1) service: DEFAULT_GROUP@@mkk-rbac-biz -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:24:31.315] [task-1] current ips:(1) service: DEFAULT_GROUP@@mkk-rbac-biz -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:24:31.316] [task-1] Flipping property: mkk-rbac-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:24:31.316] [task-1] DynamicServerListLoadBalancer for client mkk-rbac-biz initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-rbac-biz,current list of Servers=[192.168.139.1:4000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.139.1:4000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@7ce37c8b 
[2020-12-17 14:24:31.322] [XNIO-1 task-1] <st>调用方法： log，ip=192.168.139.1 
[2020-12-17 14:24:31.356] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:24:31.362] [XNIO-1 task-1] INSERT INTO sys_log ( type, title, create_by, remote_addr, user_agent, request_uri, method, params, time, service_id ) VALUES ( '0', '更新用户信息', 'admin', '10.101.128.64', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36', '/user', 'PUT', '', 22, 'pig' )[SQL执行时间：5毫秒] 
[2020-12-17 14:24:31.363] [XNIO-1 task-1] <ed>调用方法： log，ip=192.168.139.1，执行时间：41 毫秒 
[2020-12-17 14:24:31.366] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：7毫秒] 
[2020-12-17 14:24:31.367] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：11 毫秒 
[2020-12-17 14:24:32.315] [PollingServerListUpdater-1] Flipping property: mkk-rbac-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:24:50.944] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:24:50.963] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：18毫秒] 
[2020-12-17 14:24:50.964] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：20 毫秒 
[2020-12-17 14:26:22.219] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:26:22.224] [XNIO-1 task-2] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 91262 
[2020-12-17 14:26:22.225] [XNIO-1 task-2] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 110862 
[2020-12-17 14:26:22.232] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：12毫秒] 
[2020-12-17 14:26:22.233] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：14 毫秒 
[2020-12-17 14:26:26.069] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:26:26.073] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：3毫秒] 
[2020-12-17 14:26:26.074] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：5 毫秒 
[2020-12-17 14:26:28.109] [XNIO-1 task-2] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 14:26:28.112] [XNIO-1 task-2] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 14:26:28.114] [XNIO-1 task-2] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 14:26:28.118] [XNIO-1 task-2] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：9 毫秒 
[2020-12-17 14:26:28.331] [XNIO-1 task-2] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 14:26:28.336] [XNIO-1 task-1] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:26:28.336] [XNIO-1 task-2] <ed>调用方法： menu，ip=10.101.128.64，执行时间：5 毫秒 
[2020-12-17 14:26:28.341] [XNIO-1 task-1] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：4毫秒] 
[2020-12-17 14:26:28.342] [XNIO-1 task-1] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 14:26:30.239] [XNIO-1 task-2] <st>调用方法： dept/tree，ip=10.101.128.64 
[2020-12-17 14:26:30.242] [XNIO-1 task-2] SELECT dept_id,name,sort,create_time,update_time,parent_id,del_flag FROM sys_dept WHERE del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 14:26:30.242] [XNIO-1 task-1] <st>调用方法： role/list，ip=10.101.128.64 
[2020-12-17 14:26:30.242] [XNIO-1 task-2] <ed>调用方法： dept/tree，ip=10.101.128.64，执行时间：3 毫秒 
[2020-12-17 14:26:30.245] [XNIO-1 task-1] SELECT role_id,role_name,role_code,role_desc,create_time,update_time,del_flag FROM sys_role WHERE del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 14:26:30.246] [XNIO-1 task-1] <ed>调用方法： role/list，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 14:27:36.255] [XNIO-1 task-1] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:27:36.257] [XNIO-1 task-1] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 66013 
[2020-12-17 14:27:36.263] [XNIO-1 task-1] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：8毫秒] 
[2020-12-17 14:27:36.264] [XNIO-1 task-1] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：9 毫秒 
[2020-12-17 14:27:57.701] [XNIO-1 task-1] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:27:57.705] [XNIO-1 task-1] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：3毫秒] 
[2020-12-17 14:27:57.706] [XNIO-1 task-1] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：5 毫秒 
[2020-12-17 14:27:59.802] [XNIO-1 task-1] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 14:27:59.805] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 14:27:59.809] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：4毫秒] 
[2020-12-17 14:27:59.812] [XNIO-1 task-1] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：10 毫秒 
[2020-12-17 14:28:00.025] [XNIO-1 task-1] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 14:28:00.029] [XNIO-1 task-1] <ed>调用方法： menu，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 14:28:00.031] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:28:00.035] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：3毫秒] 
[2020-12-17 14:28:00.036] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：5 毫秒 
[2020-12-17 14:28:02.390] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:28:02.396] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：5毫秒] 
[2020-12-17 14:28:02.397] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 14:28:07.590] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:28:07.594] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：4毫秒] 
[2020-12-17 14:28:07.595] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：5 毫秒 
[2020-12-17 14:28:08.333] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:28:08.337] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：4毫秒] 
[2020-12-17 14:28:08.338] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：5 毫秒 
[2020-12-17 14:28:08.466] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:28:08.478] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：11毫秒] 
[2020-12-17 14:28:08.479] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：13 毫秒 
[2020-12-17 14:28:08.611] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:28:08.615] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：3毫秒] 
[2020-12-17 14:28:08.616] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：5 毫秒 
[2020-12-17 14:28:08.744] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:28:08.748] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：4毫秒] 
[2020-12-17 14:28:08.750] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：6 毫秒 
[2020-12-17 14:28:44.757] [XNIO-1 task-2] <st>调用方法： dept/tree，ip=10.101.128.64 
[2020-12-17 14:28:44.758] [XNIO-1 task-1] <st>调用方法： role/list，ip=10.101.128.64 
[2020-12-17 14:28:44.760] [XNIO-1 task-2] SELECT dept_id,name,sort,create_time,update_time,parent_id,del_flag FROM sys_dept WHERE del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 14:28:44.761] [XNIO-1 task-2] <ed>调用方法： dept/tree，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 14:28:44.761] [XNIO-1 task-1] SELECT role_id,role_name,role_code,role_desc,create_time,update_time,del_flag FROM sys_role WHERE del_flag='0'[SQL执行时间：3毫秒] 
[2020-12-17 14:28:44.762] [XNIO-1 task-1] <ed>调用方法： role/list，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 14:29:01.253] [XNIO-1 task-2] <st>调用方法： role/list，ip=10.101.128.64 
[2020-12-17 14:29:01.255] [XNIO-1 task-2] SELECT role_id,role_name,role_code,role_desc,create_time,update_time,del_flag FROM sys_role WHERE del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 14:29:01.256] [XNIO-1 task-2] <ed>调用方法： role/list，ip=10.101.128.64，执行时间：3 毫秒 
[2020-12-17 14:29:01.257] [XNIO-1 task-1] <st>调用方法： dept/tree，ip=10.101.128.64 
[2020-12-17 14:29:01.259] [XNIO-1 task-1] SELECT dept_id,name,sort,create_time,update_time,parent_id,del_flag FROM sys_dept WHERE del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 14:29:01.259] [XNIO-1 task-1] <ed>调用方法： dept/tree，ip=10.101.128.64，执行时间：2 毫秒 
[2020-12-17 14:29:33.359] [XNIO-1 task-1] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 14:29:33.367] [XNIO-1 task-1] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：7毫秒] 
[2020-12-17 14:29:33.369] [XNIO-1 task-1] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：10 毫秒 
[2020-12-17 14:39:37.540] [background-preinit] HV000001: Hibernate Validator 6.1.6.Final 
[2020-12-17 14:39:37.819] [main] Post-processing PropertySource instances 
[2020-12-17 14:39:37.878] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 14:39:37.879] [main] Converting PropertySource bootstrap [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:37.879] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:37.879] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:37.879] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:39:37.879] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:37.880] [main] Converting PropertySource applicationConfig: [classpath:/bootstrap.yml] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:37.914] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 14:39:37.919] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 14:39:37.920] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 14:39:38.336] [main] Bootstraping jasypt-string-boot auto configuration in context: mkk-rbac-biz-1 
[2020-12-17 14:39:38.337] [main] The following profiles are active: dev 
[2020-12-17 14:39:39.119] [main] AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether. 
[2020-12-17 14:39:39.252] [main] Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format. 
[2020-12-17 14:39:39.256] [main] Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format. 
[2020-12-17 14:39:39.494] [main] Multiple Spring Data modules found, entering strict repository configuration mode! 
[2020-12-17 14:39:39.496] [main] Bootstrapping Spring Data Redis repositories in DEFAULT mode. 
[2020-12-17 14:39:39.521] [main] Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces. 
[2020-12-17 14:39:39.567] [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format. 
[2020-12-17 14:39:39.704] [main] BeanFactory id=04747f92-8a36-3701-b06c-86f957a51cf8 
[2020-12-17 14:39:39.718] [main] Post-processing PropertySource instances 
[2020-12-17 14:39:39.728] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 14:39:39.728] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 14:39:39.728] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 14:39:39.728] [main] Converting PropertySource bootstrapProperties-application-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 14:39:39.728] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 14:39:39.729] [main] Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:39:39.729] [main] Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:39:39.729] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:39.729] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:39.729] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:39:39.729] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:39.729] [main] Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:39.729] [main] Converting PropertySource springCloudDefaultProperties [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 14:39:39.729] [main] Converting PropertySource cachedrandom [org.springframework.cloud.util.random.CachedRandomPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 14:39:39.739] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 14:39:39.953] [main] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@15214920' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 14:39:39.959] [main] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 14:39:39.968] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 14:39:39.968] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 14:39:40.023] [main] Bean 'spring.cloud.sentinel-com.alibaba.cloud.sentinel.SentinelProperties' of type [com.alibaba.cloud.sentinel.SentinelProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 14:39:40.120] [main] Bean 'com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration' of type [com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 14:39:40.309] [main] UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used 
[2020-12-17 14:39:40.335] [main] Initializing Spring embedded WebApplicationContext 
[2020-12-17 14:39:40.335] [main] Root WebApplicationContext: initialization completed in 1969 ms 
[2020-12-17 14:39:40.908] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysDeptRelation". 
[2020-12-17 14:39:41.073] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysUserRole". 
[2020-12-17 14:39:41.632] [main] String Encryptor custom Bean not found with name 'jasyptStringEncryptor'. Initializing Default String Encryptor 
[2020-12-17 14:39:41.641] [main] Encryptor config not found for property jasypt.encryptor.algorithm, using default value: PBEWithMD5AndDES 
[2020-12-17 14:39:41.642] [main] Encryptor config not found for property jasypt.encryptor.keyObtentionIterations, using default value: 1000 
[2020-12-17 14:39:41.642] [main] Encryptor config not found for property jasypt.encryptor.poolSize, using default value: 1 
[2020-12-17 14:39:41.642] [main] Encryptor config not found for property jasypt.encryptor.providerName, using default value: null 
[2020-12-17 14:39:41.642] [main] Encryptor config not found for property jasypt.encryptor.providerClassName, using default value: null 
[2020-12-17 14:39:41.642] [main] Encryptor config not found for property jasypt.encryptor.saltGeneratorClassname, using default value: org.jasypt.salt.RandomSaltGenerator 
[2020-12-17 14:39:41.643] [main] Encryptor config not found for property jasypt.encryptor.stringOutputType, using default value: base64 
[2020-12-17 14:39:42.067] [main] Initializing ExecutorService 
[2020-12-17 14:39:42.171] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysRoleMenu". 
[2020-12-17 14:39:42.556] [main] [Sentinel Starter] register SentinelWebInterceptor with urlPatterns: [/**]. 
[2020-12-17 14:39:42.872] [main] initializer namespace from System Property :null 
[2020-12-17 14:39:42.873] [main] initializer namespace from System Environment :null 
[2020-12-17 14:39:42.873] [main] initializer namespace from System Property :null 
[2020-12-17 14:39:42.892] [main] 初始化数据源配置OK...... 
[2020-12-17 14:39:43.131] [main] Exposing 21 endpoint(s) beneath base path '/actuator' 
[2020-12-17 14:39:43.401] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 14:39:43.402] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 14:39:43.406] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 14:39:43.406] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 14:39:43.488] [main] Initializing ExecutorService 'applicationTaskExecutor' 
[2020-12-17 14:39:43.597] [main] Initializing ExecutorService 'Nacos-Watch-Task-Scheduler' 
[2020-12-17 14:39:43.849] [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@69dc7b24, org.springframework.security.web.context.SecurityContextPersistenceFilter@4e67e090, org.springframework.security.web.header.HeaderWriterFilter@7d0333c8, org.springframework.security.web.authentication.logout.LogoutFilter@4a7e469d, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@3b0c38f2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@14983265, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5464aeec, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@297454f7, org.springframework.security.web.session.SessionManagementFilter@72015156, org.springframework.security.web.access.ExceptionTranslationFilter@3c108c05, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@53016c98] 
[2020-12-17 14:39:44.145] [main] All Spring Cloud Security modules and starters are deprecated. They will be moved to individual projects in the next major release. 
[2020-12-17 14:39:44.275] [main] [LISTENER] adding DEFAULT_GROUP@@mkk-rbac-biz with DEFAULT to listener map 
[2020-12-17 14:39:44.286] [main] starting server: Undertow - 2.1.4.Final 
[2020-12-17 14:39:44.292] [main] XNIO version 3.8.0.Final 
[2020-12-17 14:39:44.299] [main] XNIO NIO Implementation Version 3.8.0.Final 
[2020-12-17 14:39:44.333] [main] JBoss Threads version 3.1.0.Final 
[2020-12-17 14:39:44.374] [main] Undertow started on port(s) 4000 (http) 
[2020-12-17 14:39:44.378] [main] [BEAT] adding beat: BeatInfo{port=4000, ip='192.168.139.1', weight=1.0, serviceName='DEFAULT_GROUP@@mkk-rbac-biz', cluster='DEFAULT', metadata={preserved.register.source=SPRING_CLOUD}, scheduled=false, period=5000, stopped=false} to beat map. 
[2020-12-17 14:39:44.379] [main] [REGISTER-SERVICE] public registering service DEFAULT_GROUP@@mkk-rbac-biz with instance: Instance{instanceId='null', ip='192.168.139.1', port=4000, weight=1.0, healthy=true, enabled=true, ephemeral=true, clusterName='DEFAULT', serviceName='null', metadata={preserved.register.source=SPRING_CLOUD}} 
[2020-12-17 14:39:44.382] [main] nacos registry, DEFAULT_GROUP mkk-rbac-biz 192.168.139.1:4000 register finished 
[2020-12-17 14:39:44.890] [main] Started AdminApplication in 8.103 seconds (JVM running for 8.899) 
[2020-12-17 14:39:44.894] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz.yml+DEFAULT_GROUP 
[2020-12-17 14:39:44.895] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 14:39:44.896] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz-dev.yml+DEFAULT_GROUP 
[2020-12-17 14:39:44.896] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz-dev.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 14:39:44.896] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz+DEFAULT_GROUP 
[2020-12-17 14:39:44.896] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 14:39:45.194] [RMI TCP Connection(5)-192.168.139.1] Initializing Spring DispatcherServlet 'dispatcherServlet' 
[2020-12-17 14:39:45.194] [RMI TCP Connection(5)-192.168.139.1] Initializing Servlet 'dispatcherServlet' 
[2020-12-17 14:39:45.202] [RMI TCP Connection(5)-192.168.139.1] Completed initialization in 8 ms 
[2020-12-17 14:39:45.281] [com.alibaba.nacos.client.naming.updater] new ips(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:39:45.283] [com.alibaba.nacos.client.naming.updater] current ips:(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:39:46.255] [RMI TCP Connection(4)-192.168.139.1] {dataSource-1} inited 
[2020-12-17 14:39:46.350] [RMI TCP Connection(4)-192.168.139.1] {dataSource-2} inited 
[2020-12-17 14:40:02.295] [XNIO-1 task-1] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 14:40:02.405] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：32毫秒] 
[2020-12-17 14:40:02.411] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 14:40:02.497] [XNIO-1 task-1] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：203 毫秒 
[2020-12-17 14:40:02.900] [XNIO-1 task-1] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:40:02.915] [XNIO-1 task-1] Client: mkk-base-auth instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-base-auth,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null 
[2020-12-17 14:40:02.921] [XNIO-1 task-1] Using serverListUpdater PollingServerListUpdater 
[2020-12-17 14:40:02.925] [XNIO-1 task-1] new ips(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:40:02.925] [XNIO-1 task-1] current ips:(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:40:02.933] [XNIO-1 task-1] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:40:02.935] [XNIO-1 task-1] DynamicServerListLoadBalancer for client mkk-base-auth initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-base-auth,current list of Servers=[192.168.139.1:3000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.139.1:3000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@3903580c 
[2020-12-17 14:40:03.010] [XNIO-1 task-1] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 14:40:03.014] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 14:40:03.015] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 14:40:03.029] [XNIO-1 task-1] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：19 毫秒 
[2020-12-17 14:40:03.118] [XNIO-1 task-1] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 14:40:03.132] [XNIO-1 task-1] <ed>调用方法： menu，ip=10.101.128.64，执行时间：14 毫秒 
[2020-12-17 14:40:03.924] [PollingServerListUpdater-0] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:40:06.734] [XNIO-1 task-1] <st>调用方法： dict/type/dict_type，ip=10.101.128.64 
[2020-12-17 14:40:06.745] [XNIO-1 task-1] <ed>调用方法： dict/type/dict_type，ip=10.101.128.64，执行时间：11 毫秒 
[2020-12-17 14:40:06.758] [XNIO-1 task-2] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 14:40:06.796] [XNIO-1 task-2] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:40:06.797] [XNIO-1 task-2] Client: mkk-config-biz instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-config-biz,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null 
[2020-12-17 14:40:06.797] [XNIO-1 task-2] Using serverListUpdater PollingServerListUpdater 
[2020-12-17 14:40:06.799] [XNIO-1 task-2] new ips(1) service: DEFAULT_GROUP@@mkk-config-biz -> [{"instanceId":"192.168.139.1#6000#DEFAULT#DEFAULT_GROUP@@mkk-config-biz","ip":"192.168.139.1","port":6000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-config-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:40:06.799] [XNIO-1 task-2] current ips:(1) service: DEFAULT_GROUP@@mkk-config-biz -> [{"instanceId":"192.168.139.1#6000#DEFAULT#DEFAULT_GROUP@@mkk-config-biz","ip":"192.168.139.1","port":6000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-config-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:40:06.800] [XNIO-1 task-2] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:40:06.800] [XNIO-1 task-2] DynamicServerListLoadBalancer for client mkk-config-biz initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-config-biz,current list of Servers=[192.168.139.1:6000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.139.1:6000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@6f30f085 
[2020-12-17 14:40:06.991] [XNIO-1 task-2] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE del_flag='0'[SQL执行时间：28毫秒] 
[2020-12-17 14:40:06.994] [XNIO-1 task-2] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：236 毫秒 
[2020-12-17 14:40:07.798] [PollingServerListUpdater-0] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 14:44:27.386] [XNIO-1 task-2] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 14:44:27.396] [XNIO-1 task-2] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 260398 
[2020-12-17 14:44:27.400] [XNIO-1 task-2] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：13毫秒] 
[2020-12-17 14:44:27.401] [XNIO-1 task-2] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 14:44:27.404] [XNIO-1 task-2] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：18 毫秒 
[2020-12-17 14:44:27.634] [XNIO-1 task-2] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 14:44:27.641] [XNIO-1 task-2] <ed>调用方法： menu，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 14:44:27.657] [XNIO-1 task-1] <st>调用方法： dict/type/dict_type，ip=10.101.128.64 
[2020-12-17 14:44:27.670] [XNIO-1 task-1] <ed>调用方法： dict/type/dict_type，ip=10.101.128.64，执行时间：13 毫秒 
[2020-12-17 14:44:27.677] [XNIO-1 task-3] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 14:44:27.688] [XNIO-1 task-3] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE del_flag='0'[SQL执行时间：4毫秒] 
[2020-12-17 14:44:27.689] [XNIO-1 task-3] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：12 毫秒 
[2020-12-17 14:44:34.208] [XNIO-1 task-3] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 14:44:34.211] [XNIO-1 task-3] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 14:44:34.212] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 14:44:34.215] [XNIO-1 task-3] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：7 毫秒 
[2020-12-17 14:50:25.726] [XNIO-1 task-3] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 14:50:25.728] [XNIO-1 task-3] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 351516 
[2020-12-17 14:50:25.733] [XNIO-1 task-3] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：6毫秒] 
[2020-12-17 14:50:25.734] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 14:50:25.737] [XNIO-1 task-3] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：11 毫秒 
[2020-12-17 14:50:25.798] [XNIO-1 task-3] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 14:50:25.807] [XNIO-1 task-3] <ed>调用方法： menu，ip=10.101.128.64，执行时间：9 毫秒 
[2020-12-17 14:50:54.221] [XNIO-1 task-3] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 14:50:54.224] [XNIO-1 task-3] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 14:50:54.227] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：3毫秒] 
[2020-12-17 14:50:54.232] [XNIO-1 task-3] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：11 毫秒 
[2020-12-17 14:54:34.154] [com.alibaba.nacos.client.naming.updater] removed ips(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:54:34.154] [com.alibaba.nacos.client.naming.updater] current ips:(0) service: DEFAULT_GROUP@@mkk-base-auth -> [] 
[2020-12-17 14:54:36.156] [com.alibaba.nacos.client.naming.updater] new ips(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:54:36.156] [com.alibaba.nacos.client.naming.updater] current ips:(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:55:06.167] [com.alibaba.nacos.client.naming.updater] removed ips(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:55:06.168] [com.alibaba.nacos.client.naming.updater] current ips:(0) service: DEFAULT_GROUP@@mkk-base-auth -> [] 
[2020-12-17 14:56:08.176] [com.alibaba.nacos.client.naming.updater] new ips(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 14:56:08.176] [com.alibaba.nacos.client.naming.updater] current ips:(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 15:00:44.977] [XNIO-1 task-3] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 15:00:44.980] [XNIO-1 task-3] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 590753 
[2020-12-17 15:00:44.984] [XNIO-1 task-3] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：6毫秒] 
[2020-12-17 15:00:44.985] [XNIO-1 task-3] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 15:00:44.989] [XNIO-1 task-3] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：12 毫秒 
[2020-12-17 15:00:45.040] [XNIO-1 task-3] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 15:00:45.043] [XNIO-1 task-3] <ed>调用方法： menu，ip=10.101.128.64，执行时间：3 毫秒 
[2020-12-17 15:12:54.276] [background-preinit] HV000001: Hibernate Validator 6.1.6.Final 
[2020-12-17 15:12:54.534] [main] Post-processing PropertySource instances 
[2020-12-17 15:12:54.583] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 15:12:54.583] [main] Converting PropertySource bootstrap [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:54.583] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:54.583] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:54.584] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 15:12:54.584] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:54.584] [main] Converting PropertySource applicationConfig: [classpath:/bootstrap.yml] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:54.616] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 15:12:54.621] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 15:12:54.622] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 15:12:55.017] [main] Bootstraping jasypt-string-boot auto configuration in context: mkk-rbac-biz-1 
[2020-12-17 15:12:55.017] [main] The following profiles are active: dev 
[2020-12-17 15:12:55.781] [main] AutoProxyRegistrar was imported but no annotations were found having both 'mode' and 'proxyTargetClass' attributes of type AdviceMode and boolean respectively. This means that auto proxy creator registration and configuration may not have occurred as intended, and components may not be proxied as expected. Check to ensure that AutoProxyRegistrar has been @Import'ed on the same class where these annotations are declared; otherwise remove the import of AutoProxyRegistrar altogether. 
[2020-12-17 15:12:55.910] [main] Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format. 
[2020-12-17 15:12:55.913] [main] Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format. 
[2020-12-17 15:12:56.148] [main] Multiple Spring Data modules found, entering strict repository configuration mode! 
[2020-12-17 15:12:56.150] [main] Bootstrapping Spring Data Redis repositories in DEFAULT mode. 
[2020-12-17 15:12:56.175] [main] Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces. 
[2020-12-17 15:12:56.222] [main] Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format. 
[2020-12-17 15:12:56.358] [main] BeanFactory id=04747f92-8a36-3701-b06c-86f957a51cf8 
[2020-12-17 15:12:56.371] [main] Post-processing PropertySource instances 
[2020-12-17 15:12:56.381] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource bootstrapProperties-mkk-rbac-biz,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource bootstrapProperties-application-dev.yml,DEFAULT_GROUP [org.springframework.cloud.bootstrap.config.BootstrapPropertySource] to EncryptableEnumerablePropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy 
[2020-12-17 15:12:56.381] [main] Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource springCloudClientHostInfo [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:56.381] [main] Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:56.382] [main] Converting PropertySource springCloudDefaultProperties [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper 
[2020-12-17 15:12:56.382] [main] Converting PropertySource cachedrandom [org.springframework.cloud.util.random.CachedRandomPropertySource] to EncryptablePropertySourceWrapper 
[2020-12-17 15:12:56.392] [main] Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter 
[2020-12-17 15:12:56.597] [main] Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@13cc0b90' of type [org.springframework.security.oauth2.provider.expression.OAuth2MethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 15:12:56.603] [main] Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 15:12:56.613] [main] Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver 
[2020-12-17 15:12:56.613] [main] Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector 
[2020-12-17 15:12:56.670] [main] Bean 'spring.cloud.sentinel-com.alibaba.cloud.sentinel.SentinelProperties' of type [com.alibaba.cloud.sentinel.SentinelProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 15:12:56.767] [main] Bean 'com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration' of type [com.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 
[2020-12-17 15:12:56.964] [main] UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used 
[2020-12-17 15:12:56.990] [main] Initializing Spring embedded WebApplicationContext 
[2020-12-17 15:12:56.990] [main] Root WebApplicationContext: initialization completed in 1951 ms 
[2020-12-17 15:12:57.573] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysDeptRelation". 
[2020-12-17 15:12:57.739] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysUserRole". 
[2020-12-17 15:12:58.287] [main] String Encryptor custom Bean not found with name 'jasyptStringEncryptor'. Initializing Default String Encryptor 
[2020-12-17 15:12:58.294] [main] Encryptor config not found for property jasypt.encryptor.algorithm, using default value: PBEWithMD5AndDES 
[2020-12-17 15:12:58.294] [main] Encryptor config not found for property jasypt.encryptor.keyObtentionIterations, using default value: 1000 
[2020-12-17 15:12:58.294] [main] Encryptor config not found for property jasypt.encryptor.poolSize, using default value: 1 
[2020-12-17 15:12:58.294] [main] Encryptor config not found for property jasypt.encryptor.providerName, using default value: null 
[2020-12-17 15:12:58.294] [main] Encryptor config not found for property jasypt.encryptor.providerClassName, using default value: null 
[2020-12-17 15:12:58.294] [main] Encryptor config not found for property jasypt.encryptor.saltGeneratorClassname, using default value: org.jasypt.salt.RandomSaltGenerator 
[2020-12-17 15:12:58.295] [main] Encryptor config not found for property jasypt.encryptor.stringOutputType, using default value: base64 
[2020-12-17 15:12:58.728] [main] Initializing ExecutorService 
[2020-12-17 15:12:58.818] [main] Can not find table primary key in Class: "com.cloud.mkk.admin.api.entity.SysRoleMenu". 
[2020-12-17 15:12:59.202] [main] [Sentinel Starter] register SentinelWebInterceptor with urlPatterns: [/**]. 
[2020-12-17 15:12:59.517] [main] initializer namespace from System Property :null 
[2020-12-17 15:12:59.517] [main] initializer namespace from System Environment :null 
[2020-12-17 15:12:59.517] [main] initializer namespace from System Property :null 
[2020-12-17 15:12:59.535] [main] 初始化数据源配置OK...... 
[2020-12-17 15:12:59.786] [main] Exposing 21 endpoint(s) beneath base path '/actuator' 
[2020-12-17 15:13:00.068] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 15:13:00.068] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 15:13:00.071] [main] No URLs will be polled as dynamic configuration sources. 
[2020-12-17 15:13:00.072] [main] To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 
[2020-12-17 15:13:00.154] [main] Initializing ExecutorService 'applicationTaskExecutor' 
[2020-12-17 15:13:00.266] [main] Initializing ExecutorService 'Nacos-Watch-Task-Scheduler' 
[2020-12-17 15:13:00.529] [main] Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2190508d, org.springframework.security.web.context.SecurityContextPersistenceFilter@58189b85, org.springframework.security.web.header.HeaderWriterFilter@35e357b, org.springframework.security.web.authentication.logout.LogoutFilter@3b0c38f2, org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter@6f740044, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5e41e6ad, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6c767288, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@70b630d, org.springframework.security.web.session.SessionManagementFilter@6fbfd28b, org.springframework.security.web.access.ExceptionTranslationFilter@361483eb, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1add90e0] 
[2020-12-17 15:13:00.823] [main] All Spring Cloud Security modules and starters are deprecated. They will be moved to individual projects in the next major release. 
[2020-12-17 15:13:00.951] [main] [LISTENER] adding DEFAULT_GROUP@@mkk-rbac-biz with DEFAULT to listener map 
[2020-12-17 15:13:00.962] [main] starting server: Undertow - 2.1.4.Final 
[2020-12-17 15:13:00.969] [main] XNIO version 3.8.0.Final 
[2020-12-17 15:13:00.976] [main] XNIO NIO Implementation Version 3.8.0.Final 
[2020-12-17 15:13:01.012] [main] JBoss Threads version 3.1.0.Final 
[2020-12-17 15:13:01.052] [main] Undertow started on port(s) 4000 (http) 
[2020-12-17 15:13:01.056] [main] [BEAT] adding beat: BeatInfo{port=4000, ip='192.168.139.1', weight=1.0, serviceName='DEFAULT_GROUP@@mkk-rbac-biz', cluster='DEFAULT', metadata={preserved.register.source=SPRING_CLOUD}, scheduled=false, period=5000, stopped=false} to beat map. 
[2020-12-17 15:13:01.057] [main] [REGISTER-SERVICE] public registering service DEFAULT_GROUP@@mkk-rbac-biz with instance: Instance{instanceId='null', ip='192.168.139.1', port=4000, weight=1.0, healthy=true, enabled=true, ephemeral=true, clusterName='DEFAULT', serviceName='null', metadata={preserved.register.source=SPRING_CLOUD}} 
[2020-12-17 15:13:01.059] [main] nacos registry, DEFAULT_GROUP mkk-rbac-biz 192.168.139.1:4000 register finished 
[2020-12-17 15:13:01.556] [main] Started AdminApplication in 7.992 seconds (JVM running for 8.71) 
[2020-12-17 15:13:01.560] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz.yml+DEFAULT_GROUP 
[2020-12-17 15:13:01.561] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 15:13:01.561] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz-dev.yml+DEFAULT_GROUP 
[2020-12-17 15:13:01.561] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz-dev.yml, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 15:13:01.561] [main] [fixed-10.101.128.148_8848] [subscribe] mkk-rbac-biz+DEFAULT_GROUP 
[2020-12-17 15:13:01.561] [main] [fixed-10.101.128.148_8848] [add-listener] ok, tenant=, dataId=mkk-rbac-biz, group=DEFAULT_GROUP, cnt=1 
[2020-12-17 15:13:01.939] [RMI TCP Connection(1)-192.168.139.1] Initializing Spring DispatcherServlet 'dispatcherServlet' 
[2020-12-17 15:13:01.940] [RMI TCP Connection(1)-192.168.139.1] Initializing Servlet 'dispatcherServlet' 
[2020-12-17 15:13:01.959] [RMI TCP Connection(1)-192.168.139.1] Completed initialization in 19 ms 
[2020-12-17 15:13:01.965] [com.alibaba.nacos.client.naming.updater] new ips(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 15:13:01.968] [com.alibaba.nacos.client.naming.updater] current ips:(1) service: DEFAULT_GROUP@@mkk-rbac-biz@@DEFAULT -> [{"instanceId":"192.168.139.1#4000#DEFAULT#DEFAULT_GROUP@@mkk-rbac-biz","ip":"192.168.139.1","port":4000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-rbac-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 15:13:02.977] [RMI TCP Connection(2)-192.168.139.1] {dataSource-1} inited 
[2020-12-17 15:13:03.080] [RMI TCP Connection(2)-192.168.139.1] {dataSource-2} inited 
[2020-12-17 15:13:13.766] [XNIO-1 task-1] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 15:13:13.872] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：31毫秒] 
[2020-12-17 15:13:13.879] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：2毫秒] 
[2020-12-17 15:13:14.036] [XNIO-1 task-1] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：271 毫秒 
[2020-12-17 15:13:14.492] [XNIO-1 task-1] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 15:13:14.505] [XNIO-1 task-1] Client: mkk-base-auth instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-base-auth,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null 
[2020-12-17 15:13:14.511] [XNIO-1 task-1] Using serverListUpdater PollingServerListUpdater 
[2020-12-17 15:13:14.516] [XNIO-1 task-1] new ips(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 15:13:14.516] [XNIO-1 task-1] current ips:(1) service: DEFAULT_GROUP@@mkk-base-auth -> [{"instanceId":"192.168.139.1#3000#DEFAULT#DEFAULT_GROUP@@mkk-base-auth","ip":"192.168.139.1","port":3000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-base-auth","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 15:13:14.524] [XNIO-1 task-1] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 15:13:14.526] [XNIO-1 task-1] DynamicServerListLoadBalancer for client mkk-base-auth initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-base-auth,current list of Servers=[192.168.139.1:3000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.139.1:3000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@d52770d 
[2020-12-17 15:13:14.584] [XNIO-1 task-1] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 15:13:14.588] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 15:13:14.590] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 15:13:14.594] [XNIO-1 task-1] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：10 毫秒 
[2020-12-17 15:13:14.663] [XNIO-1 task-1] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 15:13:14.677] [XNIO-1 task-1] <ed>调用方法： menu，ip=10.101.128.64，执行时间：14 毫秒 
[2020-12-17 15:13:15.515] [PollingServerListUpdater-0] Flipping property: mkk-base-auth.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 15:13:17.585] [XNIO-1 task-1] <st>调用方法： dict/type/dict_type，ip=10.101.128.64 
[2020-12-17 15:13:17.594] [XNIO-1 task-1] <ed>调用方法： dict/type/dict_type，ip=10.101.128.64，执行时间：9 毫秒 
[2020-12-17 15:13:17.615] [XNIO-1 task-1] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 15:13:17.652] [XNIO-1 task-1] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 15:13:17.653] [XNIO-1 task-1] Client: mkk-config-biz instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-config-biz,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null 
[2020-12-17 15:13:17.654] [XNIO-1 task-1] Using serverListUpdater PollingServerListUpdater 
[2020-12-17 15:13:17.656] [XNIO-1 task-1] new ips(1) service: DEFAULT_GROUP@@mkk-config-biz -> [{"instanceId":"192.168.139.1#6000#DEFAULT#DEFAULT_GROUP@@mkk-config-biz","ip":"192.168.139.1","port":6000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-config-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 15:13:17.656] [XNIO-1 task-1] current ips:(1) service: DEFAULT_GROUP@@mkk-config-biz -> [{"instanceId":"192.168.139.1#6000#DEFAULT#DEFAULT_GROUP@@mkk-config-biz","ip":"192.168.139.1","port":6000,"weight":1.0,"healthy":true,"enabled":true,"ephemeral":true,"clusterName":"DEFAULT","serviceName":"DEFAULT_GROUP@@mkk-config-biz","metadata":{"preserved.register.source":"SPRING_CLOUD"},"ipDeleteTimeout":30000,"instanceHeartBeatInterval":5000,"instanceHeartBeatTimeOut":15000}] 
[2020-12-17 15:13:17.657] [XNIO-1 task-1] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 15:13:17.658] [XNIO-1 task-1] DynamicServerListLoadBalancer for client mkk-config-biz initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=mkk-config-biz,current list of Servers=[192.168.139.1:6000],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.139.1:6000;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@1be379c0 
[2020-12-17 15:13:17.851] [XNIO-1 task-1] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE del_flag='0'[SQL执行时间：29毫秒] 
[2020-12-17 15:13:17.854] [XNIO-1 task-1] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：239 毫秒 
[2020-12-17 15:13:18.655] [PollingServerListUpdater-0] Flipping property: mkk-config-biz.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647 
[2020-12-17 15:21:51.149] [XNIO-1 task-1] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 15:21:51.176] [XNIO-1 task-1] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 513310 
[2020-12-17 15:21:51.182] [XNIO-1 task-1] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE del_flag='0'[SQL执行时间：25毫秒] 
[2020-12-17 15:21:51.183] [XNIO-1 task-1] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：34 毫秒 
[2020-12-17 15:21:55.010] [XNIO-1 task-1] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 15:21:55.018] [XNIO-1 task-1] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE system='1' AND del_flag='0'[SQL执行时间：4毫秒] 
[2020-12-17 15:21:55.019] [XNIO-1 task-1] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：9 毫秒 
[2020-12-17 15:21:57.093] [XNIO-1 task-1] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 15:21:57.099] [XNIO-1 task-1] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE system='0' AND del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 15:21:57.100] [XNIO-1 task-1] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 15:21:59.354] [XNIO-1 task-1] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 15:21:59.361] [XNIO-1 task-1] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE system='1' AND del_flag='0'[SQL执行时间：3毫秒] 
[2020-12-17 15:21:59.362] [XNIO-1 task-1] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：8 毫秒 
[2020-12-17 15:22:04.505] [XNIO-1 task-1] <st>调用方法： client/page，ip=10.101.128.64 
[2020-12-17 15:22:04.526] [XNIO-1 task-1] SELECT client_id,client_secret,resource_ids,scope,authorized_grant_types,web_server_redirect_uri,authorities,access_token_validity,refresh_token_validity,additional_information,autoapprove FROM sys_oauth_client_details[SQL执行时间：13毫秒] 
[2020-12-17 15:22:04.528] [XNIO-1 task-1] <ed>调用方法： client/page，ip=10.101.128.64，执行时间：23 毫秒 
[2020-12-17 15:52:21.862] [XNIO-1 task-2] <st>调用方法： dict/type/dict_type，ip=10.101.128.64 
[2020-12-17 15:52:21.866] [XNIO-1 task-1] <st>调用方法： dict/page，ip=10.101.128.64 
[2020-12-17 15:52:21.866] [XNIO-1 task-2] <ed>调用方法： dict/type/dict_type，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 15:52:21.874] [XNIO-1 task-1] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 1817348 
[2020-12-17 15:52:21.881] [XNIO-1 task-1] SELECT id,type,description,create_time,update_time,system,remarks,del_flag FROM sys_dict WHERE del_flag='0'[SQL执行时间：10毫秒] 
[2020-12-17 15:52:21.881] [XNIO-1 task-1] <ed>调用方法： dict/page，ip=10.101.128.64，执行时间：15 毫秒 
[2020-12-17 15:52:23.223] [XNIO-1 task-1] <st>调用方法： menu/tree，ip=10.101.128.64 
[2020-12-17 15:52:23.233] [XNIO-1 task-1] SELECT menu_id,name,permission,parent_id,icon,path,sort,type,keep_alive,create_time,update_time,del_flag FROM sys_menu WHERE del_flag='0' ORDER BY sort ASC[SQL执行时间：7毫秒] 
[2020-12-17 15:52:23.235] [XNIO-1 task-1] <ed>调用方法： menu/tree，ip=10.101.128.64，执行时间：12 毫秒 
[2020-12-17 15:52:23.572] [XNIO-1 task-1] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 15:52:23.583] [XNIO-1 task-1] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：8毫秒] 
[2020-12-17 15:52:23.585] [XNIO-1 task-1] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：13 毫秒 
[2020-12-17 15:52:24.885] [XNIO-1 task-1] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 15:52:24.888] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 15:52:24.889] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 15:52:24.893] [XNIO-1 task-1] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：8 毫秒 
[2020-12-17 15:52:25.106] [XNIO-1 task-1] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 15:52:25.107] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 15:52:25.112] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：4毫秒] 
[2020-12-17 15:52:25.113] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：6 毫秒 
[2020-12-17 15:52:25.113] [XNIO-1 task-1] <ed>调用方法： menu，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 15:52:29.600] [XNIO-1 task-1] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 15:52:29.606] [XNIO-1 task-1] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：5毫秒] 
[2020-12-17 15:52:29.607] [XNIO-1 task-1] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 15:52:29.611] [XNIO-1 task-1] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：11 毫秒 
[2020-12-17 15:52:29.893] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 15:52:29.895] [XNIO-1 task-1] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 15:52:29.900] [XNIO-1 task-1] <ed>调用方法： menu，ip=10.101.128.64，执行时间：5 毫秒 
[2020-12-17 15:52:29.902] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：8毫秒] 
[2020-12-17 15:52:29.903] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：10 毫秒 
[2020-12-17 15:52:30.952] [XNIO-1 task-1] <st>调用方法： role/list，ip=10.101.128.64 
[2020-12-17 15:52:30.954] [XNIO-1 task-2] <st>调用方法： dept/tree，ip=10.101.128.64 
[2020-12-17 15:52:30.957] [XNIO-1 task-1] SELECT role_id,role_name,role_code,role_desc,create_time,update_time,del_flag FROM sys_role WHERE del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 15:52:30.958] [XNIO-1 task-1] <ed>调用方法： role/list，ip=10.101.128.64，执行时间：6 毫秒 
[2020-12-17 15:52:30.959] [XNIO-1 task-2] SELECT dept_id,name,sort,create_time,update_time,parent_id,del_flag FROM sys_dept WHERE del_flag='0'[SQL执行时间：2毫秒] 
[2020-12-17 15:52:30.961] [XNIO-1 task-2] <ed>调用方法： dept/tree，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 15:53:33.789] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 15:53:33.791] [XNIO-1 task-2] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 62831 
[2020-12-17 15:53:33.791] [XNIO-1 task-2] discard long time none received connection. , jdbcUrl : jdbc:mysql://10.101.128.148:3306/pig?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai, version : 1.2.4, lastPacketReceivedIdleMillis : 62833 
[2020-12-17 15:53:33.797] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：8毫秒] 
[2020-12-17 15:53:33.798] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：9 毫秒 
[2020-12-17 17:31:23.877] [XNIO-1 task-2] <st>调用方法： user/info/admin，ip=192.168.139.1 
[2020-12-17 17:31:23.887] [XNIO-1 task-2] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：8毫秒] 
[2020-12-17 17:31:23.889] [XNIO-1 task-2] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 17:31:23.893] [XNIO-1 task-2] <ed>调用方法： user/info/admin，ip=192.168.139.1，执行时间：16 毫秒 
[2020-12-17 17:31:24.009] [XNIO-1 task-2] <st>调用方法： user/info，ip=10.101.128.64 
[2020-12-17 17:31:24.012] [XNIO-1 task-2] SELECT user_id,username,fullname,password,salt,create_time,update_time,lock_flag,phone,avatar,dept_id,del_flag FROM sys_user WHERE del_flag='0' AND (username = 'admin')[SQL执行时间：2毫秒] 
[2020-12-17 17:31:24.013] [XNIO-1 task-2] SELECT r.* FROM sys_role r, sys_user_role ur WHERE r.role_id = ur.role_id AND r.del_flag = 0 and ur.user_id IN (1)[SQL执行时间：1毫秒] 
[2020-12-17 17:31:24.016] [XNIO-1 task-2] <ed>调用方法： user/info，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 17:31:24.063] [XNIO-1 task-2] <st>调用方法： menu，ip=10.101.128.64 
[2020-12-17 17:31:24.072] [XNIO-1 task-2] <ed>调用方法： menu，ip=10.101.128.64，执行时间：9 毫秒 
[2020-12-17 17:31:25.856] [XNIO-1 task-2] <st>调用方法： menu/tree，ip=10.101.128.64 
[2020-12-17 17:31:25.862] [XNIO-1 task-2] SELECT menu_id,name,permission,parent_id,icon,path,sort,type,keep_alive,create_time,update_time,del_flag FROM sys_menu WHERE del_flag='0' ORDER BY sort ASC[SQL执行时间：5毫秒] 
[2020-12-17 17:31:25.863] [XNIO-1 task-2] <ed>调用方法： menu/tree，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 17:32:19.000] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 17:32:19.006] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：5毫秒] 
[2020-12-17 17:32:19.007] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：7 毫秒 
[2020-12-17 17:32:31.762] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 17:32:31.766] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：4毫秒] 
[2020-12-17 17:32:31.766] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 17:32:32.102] [XNIO-1 task-2] <st>调用方法： menu/tree，ip=10.101.128.64 
[2020-12-17 17:32:32.105] [XNIO-1 task-2] SELECT menu_id,name,permission,parent_id,icon,path,sort,type,keep_alive,create_time,update_time,del_flag FROM sys_menu WHERE del_flag='0' ORDER BY sort ASC[SQL执行时间：3毫秒] 
[2020-12-17 17:32:32.106] [XNIO-1 task-2] <ed>调用方法： menu/tree，ip=10.101.128.64，执行时间：4 毫秒 
[2020-12-17 17:32:33.822] [XNIO-1 task-2] <st>调用方法： user/page，ip=10.101.128.64 
[2020-12-17 17:32:33.827] [XNIO-1 task-2] SELECT user.user_id, user.fullname, user.username, user.salt, user.phone, user.avatar, user.dept_id, user.create_time AS ucreate_time, user.update_time AS uupdate_time, user.del_flag AS udel_flag, user.lock_flag AS lock_flag, user.dept_id AS deptId, d.name AS deptName FROM sys_user AS user LEFT JOIN sys_dept AS d ON d.dept_id = user.dept_id WHERE user.del_flag = '0' ORDER BY user.create_time DESC[SQL执行时间：4毫秒] 
[2020-12-17 17:32:33.827] [XNIO-1 task-2] <ed>调用方法： user/page，ip=10.101.128.64，执行时间：5 毫秒 
